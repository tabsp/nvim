- repo: Yggdroot/indentLine
  hook_add: |
    let g:indentLine_enabled = 1
    let g:indentLine_char_list = ['|', '¦', '┆', '┊']
    let g:indentLine_concealcursor = 'niv'
    let g:indentLine_showFirstIndentLevel = 1
    let g:indentLine_fileTypeExclude = ['defx']

- repo: nvim-lua/completion-nvim
  on_event: [BufEnter]
  hook_add: |
    let g:completion_enable_auto_hover = 0
    let g:completion_auto_change_source = 1
    let g:completion_matching_smart_case = 1
    let g:completion_enable_snippet = 'vim-vsnip'
    let g:completion_trigger_keyword_length = 1
    let g:completion_chain_complete_list = [
        \  {'complete_items': ['lsp']},
        \  {'complete_items': ['snippet']},
        \  {'complete_items': ['buffers']},
        \  {'complete_items': ['path']},
        \  {'mode': '<c-p>'},
        \  {'mode': '<c-n>'}
      \]
  hook_source: |
    autocmd BufEnter * lua require'completion'.on_attach()

- repo: neovim/nvim-lspconfig
  hook_add: |
    lua << EOF
      lspconfig = require "lspconfig"
      home = os.getenv("HOME")
      lspconfig.gopls.setup{
        cmd = {"gopls","--remote=auto"};
        filetypes = {"go", "gomod"};
        root_dir = lspconfig.util.root_pattern("go.mod", ".git");
        init_options = {
          usePlaceholders=true;
          completeUnimported=true;
        };
      }
      lspconfig.sumneko_lua.setup{
        cmd = {home .. "/.local/share/nvim/lua-language-server/bin/macOS/lua-language-server", "-E", home .. "/.local/share/nvim/lua-language-server/main.lua"};
      }
      lspconfig.tsserver.setup{
        cmd = { "typescript-language-server", "--stdio" };
        filetypes = { "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx" };
        root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", ".git");
      }
    EOF

- repo: steelsojka/completion-buffers
  on_source: completion-nvim

- repo: hrsh7th/vim-vsnip
  on_event: InsertCharPre
  hook_source: |
    let g:vsnip_snippet_dir = getenv("HOME") . "/.config/nvim/snippets"

- repo: hrsh7th/vim-vsnip-integ
  on_event: InsertCharPre

- repo: jiangmiao/auto-pairs

- repo: mhartington/formatter.nvim
  on_fg: [lua, go]
  hook_add: |
    lua << EOF
      require('format').setup{
        lua = {
          luafmt = function()
            return {
              exe = "luafmt",
              args = {"--indent-count", 2, "--stdin"},
              stdin = true
            }
          end
        },
        go = {
          gofmt = function()
            return {
              exe = "gofmt",
              args = {""},
              stdin = true
            }
          end
        }
      }
    EOF

- repo: Shougo/context_filetype.vim
  on_event: BufReadPost

- repo: tyru/caw.vim
  depends: context_filetype.vim
  on_map: { nx: <Plug> }
  hook_add: |
    function! InitCaw() abort
      if !&l:modifiable
        silent! nunmap <buffer> gc
        silent! xunmap <buffer> gc
        silent! nunmap <buffer> gcc
        silent! xunmap <buffer> gcc
      else
        nmap <buffer> gc <Plug>(caw:prefix)
        xmap <buffer> gc <Plug>(caw:prefix)
        nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
        xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      endif
    endfunction
    autocmd FileType * call InitCaw()
    call InitCaw()

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [BufReadPost, BufWritePost]
  hook_source: |
    let g:gutentags_cache_dir = getenv("HOME") . "/.cache/vim/tags"
    let g:gutentags_project_root = [".root", ".git", ".project", "go.mod"]
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 1
    let g:gutentags_generate_on_new = 1
    let g:gutentags_exclude_filetypes = [ "defx"]
